import pandas as pd
from pandas import datetime
import matplotlib.pyplot as plt


def parser(x):
    return datetime.strptime(x,'%Y-%m')

sales = pd.read_csv('sales-cars.csv',index_col=0, parse_dates=[0] ,date_parser=parser)


sales.head()


sales.Month[1]


sales.plot()


from statsmodels.graphics.tsaplots import plot_acf
plot_acf(sales)


#Converting series to stationary


sales.head()


sales.shift(1)


sales_diff = sales.diff(periods=1)
# integrated of order 1, denoted by d (for diff), one of the parameter of ARIMA model



sales_diff = sales_diff[1:]
sales_diff.head()


plot_acf(sales_diff)


sales_diff.plot()


X = sales.values
train = X[0:27] # 27 data as train data
test = X[26:]  # 9 data as test data
predictions = []


train.size


from statsmodels.tsa.arima_model import ARIMA


#p,d,q  p = periods taken for autoregressive model
#d -> Integrated order, difference
# q periods in moving average model
model_arima = ARIMA(train,order=(9, 2, 0))
model_arima_fit = model_arima.fit()
print(model_arima_fit.aic)


predictions= model_arima_fit.forecast(steps=10)[0]
predictions


plt.plot(test)
plt.plot(predictions,color='red')


mean_squared_error(test,predictions)


import itertools
p=d=q=range(0,5)
pdq = list(itertools.product(p,d,q))
pdq


import warnings
warnings.filterwarnings('ignore')
for param in pdq:
    try:
        model_arima = ARIMA(train,order=param)
        model_arima_fit = model_arima.fit()
        print(param,model_arima_fit.aic)
    except:
        continue
        
        
        
